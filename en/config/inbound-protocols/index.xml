<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Inbounds 可用协议列表 on Project X</title><link>https://xtls.github.io/en/config/inbound-protocols/</link><description>Recent content in Inbounds 可用协议列表 on Project X</description><generator>Hugo -- gohugo.io</generator><language>cn</language><lastBuildDate>Wed, 23 Dec 2020 00:00:00 +0000</lastBuildDate><atom:link href="https://xtls.github.io/en/config/inbound-protocols/index.xml" rel="self" type="application/rss+xml"/><item><title>Dokodemo door</title><link>https://xtls.github.io/en/config/inbound-protocols/dokodemo/</link><pubDate>Wed, 23 Dec 2020 00:00:00 +0000</pubDate><guid>https://xtls.github.io/en/config/inbound-protocols/dokodemo/</guid><description>Dokodemo door（任意门）可以监听一个本地端口，并把所有进入此端口的数据发送至指定服务器的一个端口，从而达到端口映射的效果。
InboundConfigurationObject { &amp;#34;address&amp;#34;: &amp;#34;8.8.8.8&amp;#34;, &amp;#34;port&amp;#34;: 53, &amp;#34;network&amp;#34;: &amp;#34;tcp&amp;#34;, &amp;#34;timeout&amp;#34;: 0, &amp;#34;followRedirect&amp;#34;: false, &amp;#34;userLevel&amp;#34;: 0 } address: address
将流量转发到此地址。可以是一个 IP 地址，形如 &amp;quot;1.2.3.4&amp;quot;，或者一个域名，形如 &amp;quot;xray.com&amp;quot;。字符串类型。
当 followRedirect（见下文）为 true 时，address 可为空。
port: number
将流量转发到目标地址的指定端口，范围 [1, 65535]，数值类型。必填参数。
network: &amp;ldquo;tcp&amp;rdquo; | &amp;ldquo;udp&amp;rdquo; | &amp;ldquo;tcp,udp&amp;rdquo;
可接收的网络协议类型。比如当指定为 &amp;quot;tcp&amp;quot; 时，仅会接收 TCP 流量。默认值为 &amp;quot;tcp&amp;quot;。
timeout: number
连接空闲的时间限制。单位为秒。默认值为 300。处理一个连接时，如果在 timeout 时间内，没有任何数据被传输，则中断该连接。
followRedirect: true | false
当值为 true 时，dokodemo-door 会识别出由 iptables 转发而来的数据，并转发到相应的目标地址。
可参考 传输配置 中的 tproxy 设置。</description></item><item><title>HTTP</title><link>https://xtls.github.io/en/config/inbound-protocols/http/</link><pubDate>Wed, 23 Dec 2020 00:00:00 +0000</pubDate><guid>https://xtls.github.io/en/config/inbound-protocols/http/</guid><description>HTTP 协议。
importanthttp 协议没有对传输加密，不适宜经公网中传输，更容易成为被人用作攻击的肉鸡。
http inbound 更有意义的用法是在局域网或本机环境下监听，为其他程序提供本地服务。
TIP 1
http proxy 只能代理 tcp 协议，udp 系的协议均不能通过。
TIP 2
在 Linux 中使用以下环境变量即可在当前 session 使用全局 HTTP 代理（很多软件都支持这一设置，也有不支持的）。
export http_proxy=http://127.0.0.1:8080/ (地址须改成你配置的 HTTP 入站代理地址) export https_proxy=$http_proxy InboundConfigurationObject { &amp;#34;timeout&amp;#34;: 0, &amp;#34;accounts&amp;#34;: [ { &amp;#34;user&amp;#34;: &amp;#34;my-username&amp;#34;, &amp;#34;pass&amp;#34;: &amp;#34;my-password&amp;#34; } ], &amp;#34;allowTransparent&amp;#34;: false, &amp;#34;userLevel&amp;#34;: 0 } timeout: number
连接空闲的时间限制。单位为秒。默认值为 300, 0 表示不限时。
处理一个连接时，如果在 timeout 时间内，没有任何数据被传输，则中断该连接。
accounts: [AccountObject]
一个数组，数组中每个元素为一个用户帐号。默认值为空。</description></item><item><title>Socks</title><link>https://xtls.github.io/en/config/inbound-protocols/socks/</link><pubDate>Wed, 23 Dec 2020 00:00:00 +0000</pubDate><guid>https://xtls.github.io/en/config/inbound-protocols/socks/</guid><description>标准 Socks 协议实现，兼容 Socks 4、Socks 4a 和 Socks 5。
importantsocks 协议没有对传输加密，不适宜经公网中传输
socks inbound 更有意义的用法是在局域网或本机环境下监听，为其他程序提供本地服务。
InboundConfigurationObject { &amp;#34;auth&amp;#34;: &amp;#34;noauth&amp;#34;, &amp;#34;accounts&amp;#34;: [ { &amp;#34;user&amp;#34;: &amp;#34;my-username&amp;#34;, &amp;#34;pass&amp;#34;: &amp;#34;my-password&amp;#34; } ], &amp;#34;udp&amp;#34;: false, &amp;#34;ip&amp;#34;: &amp;#34;127.0.0.1&amp;#34;, &amp;#34;userLevel&amp;#34;: 0 } auth: &amp;ldquo;noauth&amp;rdquo; | &amp;ldquo;password&amp;rdquo;
Socks 协议的认证方式，支持 &amp;quot;noauth&amp;quot; 匿名方式和 &amp;quot;password&amp;quot; 用户密码方式。
默认值为 &amp;quot;noauth&amp;quot;。
accounts: [ AccountObject ]
一个数组，数组中每个元素为一个用户帐号。
此选项仅当 auth 为 password 时有效。
默认值为空。
udp: true | false
是否开启 UDP 协议的支持。
默认值为 false。</description></item><item><title>VLESS</title><link>https://xtls.github.io/en/config/inbound-protocols/vless/</link><pubDate>Wed, 23 Dec 2020 00:00:00 +0000</pubDate><guid>https://xtls.github.io/en/config/inbound-protocols/vless/</guid><description>important目前 VLESS 没有自带加密，请用于可靠信道，如 TLS。 目前 VLESS 不支持分享。
VLESS 是一个无状态的轻量传输协议，它分为入站和出站两部分，可以作为 Xray 客户端和服务器之间的桥梁。
与 VMess 不同，VLESS 不依赖于系统时间，认证方式同样为 UUID，但不需要 alterId。
InboundConfigurationObject { &amp;#34;clients&amp;#34;: [ { &amp;#34;id&amp;#34;: &amp;#34;27848739-7e62-4138-9fd3-098a63964b6b&amp;#34;, &amp;#34;level&amp;#34;: 0, &amp;#34;email&amp;#34;: &amp;#34;love@xray.com&amp;#34;, &amp;#34;flow&amp;#34;: &amp;#34;xtls-rprx-direct&amp;#34; } ], &amp;#34;decryption&amp;#34;: &amp;#34;none&amp;#34;, &amp;#34;fallbacks&amp;#34;: [ { &amp;#34;dest&amp;#34;: 80 } ] } clients: [ ClientObject ]
一个数组，代表一组服务端认可的用户.
其中每一项是一个用户 ClientObject。
decryption: &amp;ldquo;none&amp;rdquo;
现阶段需要填 &amp;quot;none&amp;quot;，不能留空。 若未正确设置 decryption 的值，使用 Xray 或 -test 时会收到错误信息。
注意这里是 decryption，和 clients 同级。 decryption 和 vmess 协议的 encryption 的位置不同，是因为若套一层约定加密，服务端需要先解密才能知道是哪个用户。</description></item><item><title>VMess</title><link>https://xtls.github.io/en/config/inbound-protocols/vmess/</link><pubDate>Wed, 23 Dec 2020 00:00:00 +0000</pubDate><guid>https://xtls.github.io/en/config/inbound-protocols/vmess/</guid><description>VMess 是一个加密传输协议，通常作为 Xray 客户端和服务器之间的桥梁。
importantVMess 依赖于系统时间，请确保使用 Xray 的系统 UTC 时间误差在 90 秒之内，时区无关。在 Linux 系统中可以安装ntp服务来自动同步系统时间。
InboundConfigurationObject { &amp;#34;clients&amp;#34;: [ { &amp;#34;id&amp;#34;: &amp;#34;27848739-7e62-4138-9fd3-098a63964b6b&amp;#34;, &amp;#34;level&amp;#34;: 0, &amp;#34;alterId&amp;#34;: 0, &amp;#34;email&amp;#34;: &amp;#34;love@xray.com&amp;#34; } ], &amp;#34;default&amp;#34;: { &amp;#34;level&amp;#34;: 0, &amp;#34;alterId&amp;#34;: 0 }, &amp;#34;detour&amp;#34;: { &amp;#34;to&amp;#34;: &amp;#34;tag_to_detour&amp;#34; }, &amp;#34;disableInsecureEncryption&amp;#34;: false } clients: [ ClientObject ]
一个数组，代表一组服务端认可的用户.
其中每一项是一个用户ClientObject。
当此配置用作动态端口时，Xray 会自动创建用户。
detour: DetourObject
指示对应的出站协议使用另一个服务器。
default: DefaultObject
可选，clients 的默认配置。仅在配合detour时有效。
disableInsecureEncryption: true | false
是否禁止客户端使用不安全的加密方式，如果设置为 true 当客户端指定下列加密方式时，服务器会主动断开连接。</description></item><item><title>Trojan</title><link>https://xtls.github.io/en/config/inbound-protocols/trojan/</link><pubDate>Wed, 23 Dec 2020 00:00:00 +0000</pubDate><guid>https://xtls.github.io/en/config/inbound-protocols/trojan/</guid><description>Trojan 协议
importantTrojan 被设计工作在正确配置的加密 TLS 隧道
InboundConfigurationObject { &amp;#34;clients&amp;#34;: [ { &amp;#34;password&amp;#34;: &amp;#34;password&amp;#34;, &amp;#34;email&amp;#34;: &amp;#34;love@xray.com&amp;#34;, &amp;#34;level&amp;#34;: 0, &amp;#34;flow&amp;#34;: &amp;#34;xtls-rprx-direct&amp;#34; } ], &amp;#34;fallbacks&amp;#34;: [ { &amp;#34;dest&amp;#34;: 80 } ] } clients: [ ClientObject ]
一个数组，代表一组服务端认可的用户.
其中每一项是一个用户 ClientObject。
fallbacks: [ FallbackObject ]
一个数组，包含一系列强大的回落分流配置（可选）。
TIP
Xray 的 Trojan 有完整的 fallbacks 支持，配置方式完全一致。 触发回落的条件也与VLESS类似：首包长度 &amp;lt; 58 或第 57 个字节不为 &amp;lsquo;\r&amp;rsquo;（因为 Trojan 没有协议版本）或身份认证失败。
ClientObject { &amp;#34;password&amp;#34;: &amp;#34;password&amp;#34;, &amp;#34;email&amp;#34;: &amp;#34;love@xray.</description></item><item><title>Shadowsocks</title><link>https://xtls.github.io/en/config/inbound-protocols/shadowsocks/</link><pubDate>Wed, 23 Dec 2020 00:00:00 +0000</pubDate><guid>https://xtls.github.io/en/config/inbound-protocols/shadowsocks/</guid><description>Shadowsocks 协议，兼容大部分其它版本的实现。
目前兼容性如下：
支持 TCP 和 UDP 数据包转发，其中 UDP 可选择性关闭；
推荐的加密方式：
AES-256-GCM AES-128-GCM ChaCha20-Poly1305 或称 ChaCha20-IETF-Poly1305 none 或 plain 不推荐的加密方式:
AES-256-CFB AES-128-CFB ChaCha20 ChaCha20-IETF important&amp;ldquo;none&amp;rdquo; 不加密方式下，服务器端不会验证 &amp;ldquo;password&amp;rdquo; 中的密码。为确保安全性, 一般需要加上 TLS 并在传输层使用安全配置，例如 WebSocket 配置较长的 path
InboundConfigurationObject { &amp;#34;email&amp;#34;: &amp;#34;love@xray.com&amp;#34;, &amp;#34;method&amp;#34;: &amp;#34;aes-256-gcm&amp;#34;, &amp;#34;password&amp;#34;: &amp;#34;密码&amp;#34;, &amp;#34;level&amp;#34;: 0, &amp;#34;network&amp;#34;: &amp;#34;tcp&amp;#34; } email: string
邮件地址，可选，用于标识用户
method: string
必填。
推荐的加密方式： AES-256-GCM AES-128-GCM ChaCha20-Poly1305 或称 ChaCha20-IETF-Poly1305 none 或 plain password: string</description></item></channel></rss>