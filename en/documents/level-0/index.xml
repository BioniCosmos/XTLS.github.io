<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>小小白白话文 on Project X</title><link>https://xtls.github.io/en/documents/level-0/</link><description>Recent content in 小小白白话文 on Project X</description><generator>Hugo -- gohugo.io</generator><language>cn</language><lastBuildDate>Wed, 23 Dec 2020 00:00:00 +0000</lastBuildDate><atom:link href="https://xtls.github.io/en/documents/level-0/index.xml" rel="self" type="application/rss+xml"/><item><title>【第1章】前言啰嗦篇</title><link>https://xtls.github.io/en/documents/level-0/ch01-preface/</link><pubDate>Tue, 05 Jan 2021 00:00:00 +0000</pubDate><guid>https://xtls.github.io/en/documents/level-0/ch01-preface/</guid><description>1.1 这篇文档是写给谁的？ 一句话：写给 ①零基础 ②希望学习自建VPS 的新人。
1.2 这篇文档不是写给谁的？ 包括但不限于：各路大神大能、懒得自己折腾的小白、已经会折腾的高手、确定要用机场的土豪、确定要用一键脚本的逍遥派&amp;hellip;&amp;hellip; 总之只要有技术基础、或不愿不想自建的同学，您直接关闭本文即可，因为这篇文章大概是入不了您的法眼的，更可能会让您生一肚子闲气，那多划不来。
1.3 郑重声明及其他声明 郑重声明：
鄙人技术奇菜无比，故本文必然挂一漏万破绽百出。您若发现问题还请温柔提醒，莫要人参公鸡。
免责声明：
本文内容请您自行判断是否可信可靠可用，若您根据本文内容建立和使用VPS服务器时出了任何问题和不良结果，鄙人概不负责。
啰嗦声明：
基于本文【零基础用户】的目标受众，许多内容会尽力详尽说明，所以语言偏啰嗦，请做好心理准备。
1.4 为什么自建是个难题？ 要回答这个问题，就需要稍微多说一点背景信息了。
一、科学上网这件事
科学上网这件事情，说来已经发展了近二十年（震惊!!!.jpg）。最初，自己稍微动动手即可（改改host、连一下ssh）、后来需要找一个网页代理，再后来需要写一个私有协议(比如Shadowsocks)等等。
随着GFW技术这十几年来不断的迭代升级，若要完成【自己动手科学上网】这个目标，需要做的事情已经包括但不限于：
1. 了解Linux系统基本命令 2. 了解网络传输协议 3. 有技术和经济能力完成VPS购买及管理 4. 有技术和经济能力完成域名购买及管理 5. 有技术能力完成TLS证书申请 等等。 这就让【自建VPS科学上网】这个曾经简单的行为逐渐变成了令新人望而生畏的挑战。
二、零基础用户的无奈
零基础的非技术用户，如果完成上面这一连串的操作，势必要学习大量的知识，但稍微搜索之后，新人只怕会更加迷茫：大量的信息散布在互联网的各个角落：博客、问答网站、群组、论坛、GitHub、Telegram、YouTube 等等等等）。这些信息纷乱复杂、水平良莠不齐、甚至可能互相矛盾。基本上就是不把新人彻底弄晕誓不罢休。
面对这些杂乱无章的信息，新人突然就从【信息匮乏】变成了【信息过剩】。若是几番连蒙带猜的折腾以失败告终（大概率如此）的话，他的积极性势必大受挫折。在这个过程中，若他又恰好去了一些不太友好的地方去求助，恐怕还要雪上加霜的被嘲讽一番：“这么菜，用机场不就行了，瞎折腾什么啊！”、“先去学会Linux再回来问吧”。
这时候，大概也只有一声“呵呵”可以表达心情了。
1.5 “用机场不就行了？” 首先，我想反问一下那些冷嘲热讽的人：“用机场”真的就是万灵药吗？
其次，我认为“不懂”和“不想懂”是有本质区别的。态度恶劣的巨婴伸手党自然惹人厌烦，但真心自学却不得要领的人不该受到无端的白眼和歧视，也正是这种对新人不加区分的恶劣社区氛围促使我写下本文。那么闲话少说，我们来看看机场的优势与劣势究竟如何：
一、“机场“的优势
所谓“机场”，就是“线路提供商”。他负责完成1.4提到的那一串技术操作和管理，用户则付费获得使用权。所以，它的优点至少有：
用户操作简单：扫码操作、一键添加规则等 线路选择多：可解锁不同国家、地区的网络服务；比如iplc等专线服务、游戏加速服务等 接入节点多：所以抵抗节点封锁的能力强一些，封了一个就换下一个 二、“机场”的风险
“方便”这枚硬币的另一面就是“风险”，基于“机场”的技术特点和市场情况，它的风险至少有：
“机场”可完全获得用户信息：用户在网上的所有痕迹，都【必然】经过且【非常可能】长期存储在其服务器上，这些记录无法受到任何具备法律效力的用户隐私协议的约束（窥视、记录你的一举一动） “机场”缺乏市场管理：不可避免存在着以欺诈为目标的恶意商家（主动跑路） “机场”面临监管压力：大机场相对有保障的同时，也无法避免树大招风。2020年间，已经有几个大机场停运、跑路的事件发生，用户的正常使用受到严重干扰（被动跑路） “机场”技术水平难以确定：线路质量良莠不齐，挂羊头卖狗肉的现象屡见不鲜（速度慢、掉线多、连不上） 1.</description></item><item><title>【第2章】原料准备篇</title><link>https://xtls.github.io/en/documents/level-0/ch02-preparation/</link><pubDate>Tue, 05 Jan 2021 00:00:00 +0000</pubDate><guid>https://xtls.github.io/en/documents/level-0/ch02-preparation/</guid><description>这一章比较特殊，因为涉及到金钱交易行为，本文基于项目的中立立场，不做具体的推荐。我能做的，是告诉你需要准备哪些东西。
2.1 获取一台VPS 你需要获取一台健康的、IP没有被墙的VPS，并在管理后台做下面这些基础准备：
在VPS的后台安装 Debian 10 64bit 系统 小本本记下VPS的IP地址（本文会用 &amp;quot;100.200.300.400&amp;quot; 来表示） 注意： 这是一个故意写错的非法IP，请替换成你的真实IP）
小本本记下VPS的SSH远程登陆端口(Port) 小本本记下SSH远程登录的用户名和密码 购买VPS是一个比较复杂的事情，建议先去学习一下相关知识，选择适合自己的经济能力和线路需求的即可。另外可以选择薅一些国际大厂的羊毛（比如甲骨文和谷歌提供的永久免费或限时免费的套餐）。总之，务必量力而行。
说明： 关于选择 Debian 10 作为操作系统，这里稍微多说一句：不管你在网上听说了什么，不管哪个大神告诉你XXX版的Linux更好、XXX版的Linux更牛，这些Linux的派系之争跟现在的你半毛钱关系也没有！使用 Debian 10 足以让你的VPS服务器在安全、稳健运行的同时得到足够的优化（如cloud专用内核、及时的bbr支持等）。等你对Linux熟悉之后，再回头去尝试其他的Linux发行版也不迟
2.2 获取一个心仪的域名 你需要获取一个域名、并在DNS设置中添加一条A记录，指向你VPS的IP地址
请选择靠谱的国际域名服务商。选择一些常见的域名后缀就行，注意不要用 .cn 后缀。
在DNS设置中，添加一条指向你VPS的IP地址的A记录（A记录的名字可以随便起，本文会用 &amp;quot;a-name&amp;quot; 来表示。完整的域名则会用 &amp;quot;二级域名.你的域名.com&amp;quot; 或者 &amp;quot;a-name.yourdomain.com&amp;quot; 来表示）。效果如下图：
注意： 这不是一个真实可用的网址，请替换成你的真实网址
2.3 你本地电脑上需要安装的软件 SSH远程登录工具
Windows: PuTTY macOS/Linux: Terminal 远程文件拷贝工具</description></item><item><title>【第3章】远程登录篇</title><link>https://xtls.github.io/en/documents/level-0/ch03-ssh/</link><pubDate>Tue, 05 Jan 2021 00:00:00 +0000</pubDate><guid>https://xtls.github.io/en/documents/level-0/ch03-ssh/</guid><description>3.1 远程登录VPS (PuTTY) 首先，鉴于零基础人群中Windows的用户基数最大，所以本文以Windows为例进行展示。
其次，虽然Windows 10之后的PowerShell和WSL也可以达到很好的SSH操作体验。但是因为并非所有版本的Windows都有最新的组件，故本文还是以老牌的PuTTY为例，进行SSH远程登录的操作详解。（使用其他工具的话、在SSH登陆之后的操作都是一样的）
下面就跟我一步步操作吧。
进入PuTTY的官网，选择适合你操作系统的版本下载。（本文以64位版本为例）
安装运行后，将会看到PuTTY的主界面。现在请拿出你上一章记东西的小本本，在下图的对应位置填入你VPS的IP地址(VPS IP)和端口(VPS PORT)。为了方便以后使用时不用重复输入，我们可以保存会话 (Saved Sessions)，未来使用时只要按Load即可一键载入设置。
我建议将 Connection 中的 keepalive 设置为 60 秒，防止你一段时间没有操作之后SSH自动断线。另外务必再次保存设置。
注意： 对PuTTY的任何设置更新都要再次手动保存Session，不然关闭后就会丢失
点击 Open 就会进入SSH连接窗口，对应下图输入用户名与密码，与你的VPS远程主机建立连接。（本文假设默认用户名是 root，另外，在Linux系统输入密码的时候，是不会出现 ****** 这种提示符的，这样可以避免密码长度泄漏，不是你的键盘坏掉了哦！）
3.2 成功登录SSH！初识命令行界面！ 如果你的信息都填写正确，你将会看到类似下图的界面，说明已登录成功：
这个界面，就等于远程服务器的【桌面】，但它没有你熟悉的图标和鼠标，没有绚丽的色彩，有的只是简单文字，这就是【命令行界面】- Command Line Interface，或者缩写为 CLI。
接下来的所有操作，都需要你像电影里的黑客一样，在这个命令行界面中完成。也许你会觉得陌生，但请相信我，使用命令行既不可怕，也不神秘。说到底，它只不过是把你习惯的鼠标操作变成了文字指令而已，你说一句，它做一句。
现在，你可以稍微观察并熟悉一下命令行环境，这个界面其实已经告诉了你一些有用的信息了，比如系统内核版本（比如图内是 4.19.37-5）、上次登录时间及IP等。当然根据VPS的不同，你看到的界面可能会略有不同。
请注意命令行最下面一行，闪动的光标左边，有一串字符。图中显示的是root@vps-server:~#，这一串要怎么理解呢？很简单：
现在的用户是 root root 所在的服务器是 vps-server root 现在所在的文件夹是 ~ # 之后是你可以输入命令的地方 前两个很直观，无需多说。第三个是关于Linux的文件夹系统，现在也不需要过于深入，你只需要知道，&amp;quot;~&amp;ldquo;就是【当前用户的大本营】。第四个，提示符#，你也不用管，只需要知道，未来文章中会写一些需要你输入的命令，都会以 &amp;ldquo;#&amp;rdquo; 或者 &amp;ldquo;$&amp;rdquo; 开头，提示你后面是你输入命令的地方。（所以你复制命令的时候，只需要复制后面的内容，不要复制提示符）</description></item><item><title>【第4章】安全防护篇</title><link>https://xtls.github.io/en/documents/level-0/ch04-security/</link><pubDate>Tue, 05 Jan 2021 00:00:00 +0000</pubDate><guid>https://xtls.github.io/en/documents/level-0/ch04-security/</guid><description>4.1 为什么要做安全防护 Linux服务器的安全防护是一个纷繁复杂的巨大课题。无数的网站、APP、服务、甚至线下基础设施都建立在Linux的基石之上，这背后牵涉到巨大的经济利益和商业价值，当然也就就意味着黑灰产有巨大的攻击动力。但是这些服务是如此重要、根本不允许出现重大的安全漏洞。于是无数的运维专业人员都在安全攻防的战场上拼搏努力，这才让大家能享受到基本稳定的现代化数字生活。
现在，你拥有了一台VPS，并且将会敞开他的数据访问渠道来达到流量转发的目标，那就相当于你已经置身于安全攻防战场的第一线、直面所有风险。但与此同时，新人由于知识和信息的不足，看待安全问题是总是难免两极分化：要么觉得轻如鸿毛和自己没有半点关系，要么觉得重于泰山甚至惶惶不可终日。
对于前者，我的建议是：安全无小事，尽量多查一些安全方面的信息，免得自己真的受了损失才后悔莫及
对于后者，我的建议是：不用紧张，我们的服务器仍不具有太高的价值、一般不会吸引到高水平的攻击，需要面对的基本都是一些自动化脚本的恶意扫描和登录尝试，跟着本文做一些基础的防护即可
4.2 具体的风险到底是什么 就像我们在《远程登录篇》配置的一样，任何人只需要知道【IP地址】+【端口】+【用户名】+【密码】这四个要素，就能登录你的VPS服务器。那很显然，这四要素的安全就是我们要防护的底线。我们来逐一分析：
【IP地址】：恶意脚本会随机尝试和扫描IP段，可以简单认为是公开信息、无法隐藏
【端口】：如果使用默认端口，那么【端口 = 22】
【用户名】：如果使用默认用户，那么【用户名 = root】
【密码】：密码不存在默认值，一定是由VPS后台随机生成或由你自行设置的。也就是说，如果你的服务器都是默认设置，则四要素中的三个已经是已知的，那么你整个服务器的安全，就全部寄托在一串小小的密码上了。这时有几种情况：
如果你用了VPS管理后台随机生成密码，它一般包含随机的十几个大小写混杂的字母和符号，相对比较安全
如果你为了好记、把密码改成了类似123456这种超弱的密码，破解你的VPS服务器可谓不费吹灰之力
如果你为了好记、把密码改成了比较复杂、但在别的地方用过的密码，其实也并不安全。你要明白黑客手里有作弊器，比如说密码表，包含数万、数十万、数百万甚至更多曾经泄漏的真实密码）
但你要明白，没有哪个黑客真的要坐在电脑前一次一次的尝试你的密码，全部的攻击尝试都是恶意脚本自动进行的，它会24小时不眠不休的工作。也许每天你酣睡之时，你的服务器都在经受着一轮又一轮的冲击。
一旦密码被成功撞破，意味着你的四要素全部被攻击者掌握，恶意脚本就会快速登录服务器、获取服务器的最高 root 控制权、安装部署它的恶意服务，然后就可以用你的服务器来24小时做各种坏事（比如挖矿、传播病毒、发送垃圾邮件、欺诈邮件、做BT中继、甚至暗网公众节点等等等等）。如果恶意脚本比较克制，其实可以做到相当的隐蔽性。而新人一般也不会去观察留意VPS的登录记录、进程变化、CPU占用变化、流量变化等指标，你其实就很难发现自己被黑了。直到你的VPS服务商封禁你的账号、或者收到律师函为止。
别忘了，你获得VPS时大概率需要使用真实的支付信息，你登录各种网站、社交平台时也会留下你的IP地址，这些都与你的身份有直接或者间接的关系。于是，一旦这些坏事发生，它们就不可避免的与你产生了关联。
4.3 我们要做的安全防护有哪些 基于上述分析，我们要做的，自然就是对【端口】、【用户名】、【密码】这三要素进行加强，来降低被攻破的风险：
【端口】：将SSH远程登录端口修改为【非22端口】 （4.4） 【用户名】：建立【非root】的新用户、并禁用root用户SSH远程登录 （4.5、4.6） 【密码】：SSH启用RSA密钥验证登录、同时禁用密码验证登录 （4.7） 记得按顺序来，别把自己锁在门外了。</description></item><item><title>【第5章】网站建设篇</title><link>https://xtls.github.io/en/documents/level-0/ch05-webpage/</link><pubDate>Tue, 05 Jan 2021 00:00:00 +0000</pubDate><guid>https://xtls.github.io/en/documents/level-0/ch05-webpage/</guid><description>5.1 为什么要做一个网站？ 新人也许会迷惑，为什么科学上网还要建一个网站？我不会编程啊，是不是特别麻烦？
先回答第一个问题，建网站的原因有：
申请合法的TLS证书（非常重要） 提供合理的回落，防止主动探测攻击，提高安全性 建设一个伪装站（如博客、私人网盘、多媒体网站、游戏网站等），直接访问时有合理的前台，使流量使用看上去更合理。 再回答第二个问题：
本文作为演示，仅仅使用了一个最简单的【单文件html页面 + Nginx】来搭建，以此完成上面的目标，所以【非常简单】 这个网站完全可以不仅仅是伪装，而是真的做大做强，这个复杂性就完全取决于你了 对于“伪装”和“网站运营”这个目标，需要的就是各不相同、秀出真我，需要的同学可以自行搜索学习。这个内容已经完全偏离了科学上网，本文就不深入解析了。 5.2 登录VPS、安装运行Nginx 这里用到的，都是之前已经详解过的命令，所以就不重复讲解了。看不懂的同学可以看看前面的章节哦。
$ sudo apt update &amp;amp;&amp;amp; sudo apt install nginx 完成后，Nginx已经自动运行。此时打开Windows上的浏览器并输入 http://100.200.300.400:80，若看到下图的界面就说明Nginx已经正常在运行了。
5.3. 创建一个最简单的网页 小小白白Linux基础命令：
编号 命令名称 命令说明 cmd-10 mkdir 新建文件夹 cmd-11 systemctl reload 重新加载某个服务 小小白白Linux基础配置文件：</description></item><item><title>【第6章】证书管理篇</title><link>https://xtls.github.io/en/documents/level-0/ch06-certificates/</link><pubDate>Tue, 05 Jan 2021 00:00:00 +0000</pubDate><guid>https://xtls.github.io/en/documents/level-0/ch06-certificates/</guid><description>6.1 申请TLS证书 接下来我们要做的，是为我们的域名申请一个真实的TLS证书，使网站具备标准TLS加密的能力及HTTPS访问的能力。这就是Xray等现阶段安全代理工具确保流量充分加密最重要的工具。
注意： 请不要轻易使用自签证书。它并没有让操作简单太多，但增加了无谓的风险（如中间人攻击）。
这里我会使用一个叫做 acme.sh 的证书管理工具，它简单、轻量、高效，并可完成证书自动更新。
另外，我相信，现在你已经逐渐熟悉了Linux的基础操作，所以已经多次出现的命令从本章开始不再重复截图、只做简单的描述。如果实在想不起来怎么用的话，就稍微复习一下前面的章节吧。
6.2 安装 acme.sh 小小白白Linux基础命令：
编号 命令名称 命令说明 cmd-12 wget 访问（或下载）某个网页文件 cmd-13 acme.sh acme.sh证书管理相关的命令 运行安装脚本
$ wget -O - https://get.acme.sh | sh 让 acme.sh 命令生效
$ . .bashrc 开启 acme.sh 的自动升级
$ acme.sh --upgrade --auto-upgrade 到这一步的完整流程如下图：</description></item><item><title>【第7章】Xray服务器篇</title><link>https://xtls.github.io/en/documents/level-0/ch07-xray-server/</link><pubDate>Tue, 05 Jan 2021 00:00:00 +0000</pubDate><guid>https://xtls.github.io/en/documents/level-0/ch07-xray-server/</guid><description>7.1 博观而约取，厚积而薄发 本文撰写过程中，大佬开玩笑的吐槽到：你这教程，居然连载了6章都还没到Xray，不知道的还以为你是“手把手教你建网站”教程呢。（我竟无法反驳.jpg!）
其实这样的结构是我多番思考之后的决定，毕竟只有打好基础，才能在后面事半功倍快速反超。我在群里看到许多新人连nano都无法正确使用，也不会用WinSCP，远程手写编辑出来的config.json自然错误百出，连查错也变得举步维艰。
经过了前6章的准备，各位已经跟我一起翻越了Linux基本操作、VPS远程管理、网页搭建、域名管理、证书申请等等几座大山。是不是回头看看，觉得其实非常简单呢？现在我们有了如此扎实的准备，接下来安装和配置Xray时会有一种【水到渠成】的轻快感觉。
后面要做的事情非常简单：
安装 配置（如安装TLS证书、config.json） 运行 优化（如更新内核、开启bbr、网站http访问自动跳转https等） 7.2 安装Xray 首先，Xray的官方载体，就是 xray-core 开源项目（基于 MPL 2.0 开源协议）生成的二进制程序。你把这个二进制放在服务器运行，它就是服务器端；你把它下载到本地电脑运行，它就是客户端。主要区别来源于【配置】。
安装时，直接使用官方安装脚本就很简单直接。它提供了多种安装选项，有兴趣的可以去官方的安装脚本仓库中看看脚本的说明，本文使用的是【非root用户】安装模式。
写本文时，安装脚本在使用非root账户时有一些小bug，所以我决定正好把这几步分开操作，可以顺便说明一下Linux下的删除命令。
小小白白Linux基础命令：
编号 命令名称 命令说明 cmd-14 rm 删除命令 将安装脚本下载至本地：
$ wget https://github.com/XTLS/Xray-install/raw/main/install-release.sh 执行安装命令
$ sudo bash install-release.sh 使用完成之后可以删除该脚本
$ rm ~/install-release.sh 注意： 使用 rm 命令删除文件的时候，默认其实就是删除现在所在的文件夹下的文件。但是，我依然写了完整的路径： ~/install-release.sh，这是我使用 rm 时的一个安全习惯、也是我把安装分成几步之后想强调一下的内容。如果你听过一些“程序员从删库到跑路”之类的段子，大概就知道为什么了。</description></item><item><title>【第8章】Xray客户端篇</title><link>https://xtls.github.io/en/documents/level-0/ch08-xray-clients/</link><pubDate>Tue, 05 Jan 2021 00:00:00 +0000</pubDate><guid>https://xtls.github.io/en/documents/level-0/ch08-xray-clients/</guid><description>8.1 Xray的工作原理简述 要正确的配置和使用Xray，就需要正确的理解其工作原理，对于新人，可以先看看下面简化的示意图（省略了许多复杂的设置）：
这其中的关键点是：
APP要主动或借助转发工具，将数据【流入(inbounds)】Xray 客户端
流量进入客户端后，会被【客户端路由(routing)】按规则处理后，向不同方向【流出(outbounds)】Xray 客户端。比如：
国内流量直连（direct） 国外流量转发VPS（proxy） 广告流量屏蔽（block） 向VPS转发的国外流量，会跨过防火墙，【流入(inbounds)】 Xray 服务器端
流量进入服务器端后，与客户端一样，会被【服务器端路由(routing)】按规则处理后，向不同方向【流出(outbounds)】：
因为已经在防火墙之外，所以流量默认直连，你就可以访问到不存在网站们了（direct） 如果需要在不同的VPS之间做链式转发，就可以继续配置转发规则（proxy） 你可以在服务器端继续禁用各种你想禁用的流量，如广告、BT下载等（block） 注意： 请务必记得，Xray 的路由配置非常灵活，上面的说明只是无限可能性中的一种。
借助 geosite.dat 和 geoip.dat 这两个文件，可以很灵活的从【域名】和【IP】这两个角度、不留死角的控制流量流出的方向。这比曾经单一笼统的 GFWList 强大很多很多，可以做到非常细致的微调：比如可以指定Apple域名直连或转发、指定亚马逊域名代理或转发，百度的域名屏蔽等等。。。）
8.2 客户端与服务器端正确连接 现在你已经理解了 Xray 的工作原理，那么接下来的配置，其实就是【告诉你的客户端如何连接VPS服务器】。这和你已经很熟悉的、告诉PuTTY如何远程连接服务器是一样的。只不过Xray连接时的要素不止是【IP地址】+【端口】+【用户名】+【密码】这四要素了。
实际上，Xray的连接要素是由不同的协议决定的。本文在第7章的配置文件 config.json 里，我们使用 Xray 下独特而强大的 VLESS 协议 + XTLS 流控。所以看看那个配置文件的内容就能知道，这个协议组合的连接要素有：
服务器【地址】: a-name.yourdomain.com 服务器【端口】: 443 连接的【协议】: vless 连接的【流控】: xtls-rprx-direct (direct模式适合全平台，若是Linux/安卓用户，可改成 xtls-rprx-splice 性能全开) 连接的【验证】: uuiduuid-uuid-uuid-uuiduuiduuid 连接的【安全】: &amp;quot;allowInsecure&amp;quot;: false 鉴于新人一般都会使用手机APP或者电脑的GUI客户端，我就把常用的客户端罗列在下面。每个客户端都有自己独特的配置界面，逐一截图展示并不现实，所以请你务必仔细阅读这些客户端的说明、然后把上述要素填入合适的地方即可。</description></item><item><title>【第9章】附录</title><link>https://xtls.github.io/en/documents/level-0/ch09-appendix/</link><pubDate>Tue, 05 Jan 2021 00:00:00 +0000</pubDate><guid>https://xtls.github.io/en/documents/level-0/ch09-appendix/</guid><description>1. 小小白白Linux基础命令索引 编号 命令名称 命令说明 出现篇章 cmd-01 apt update 查询软件更新 《远程登录篇》 cmd-02 apt upgrade 执行软件更新 《远程登录篇》 cmd-03 nano 文本编辑器 《安全防护篇》 cmd-04 systemctl restart 重启某个服务 《安全防护篇》 cmd-05 adduser 给系统新增用户 《安全防护篇》 cmd-06 apt install 安装某个软件 《安全防护篇》 cmd-07 visudo 修改sudo权限设置专用编辑器 《安全防护篇》 cmd-08 sudo 用root权限运行某个命令 《安全防护篇》 cmd-09 chmod 修改目标文件/文件夹的权限 《安全防护篇》 cmd-10 mkdir 新建文件夹 《网站建设篇》 cmd-11 systemctl reload 重新加载某个服务 《网站建设篇》 cmd-12 wget 访问（或下载）某个网页文件 《证书管理篇》 cmd-13 acme.</description></item></channel></rss>