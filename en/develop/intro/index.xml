<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>开发手册 on Project X</title><link>https://xtls.github.io/en/develop/intro/</link><description>Recent content in 开发手册 on Project X</description><generator>Hugo -- gohugo.io</generator><language>cn</language><lastBuildDate>Wed, 23 Dec 2020 00:00:00 +0000</lastBuildDate><atom:link href="https://xtls.github.io/en/develop/intro/index.xml" rel="self" type="application/rss+xml"/><item><title>编译</title><link>https://xtls.github.io/en/develop/intro/compile/</link><pubDate>Wed, 23 Dec 2020 00:00:00 +0000</pubDate><guid>https://xtls.github.io/en/develop/intro/compile/</guid><description>前序工作 Xray 使用 Golang 作为主要编程语言。
下载 Golang: Downloads 安装 Golang: install important请使用 Golang 1.15 以上版本。
编译 拉取 Xray 源代码和依赖 在安装了git的环境下, 只需要执行以下命令即可clone一份完整的Xray-core代码:
git clone https://github.com/XTLS/Xray-core.git
注意事项 在无法正常访问 Google 的网络环境，依赖可能无法被正常拉取，可以通过各种手段代理解决.
比如可以通过设置 GOPROXY：
go env -w GOPROXY=https://goproxy.io,direct
手工编译 important本小节的命令需要在 Xray 项目根目录内运行。
在 Linux 环境下, 只需执行以下命令, 即可在当前目录下生成刚构建的 xray 可执行文件。
CGO_ENABLED=0 go build -o xray -trimpath -ldflags &amp;#34;-s -w -buildid=&amp;#34; ./main 如果需要编译可以进行debug的程序,即可以用dlv附加到运行的程序进行调试, 请去掉 ldflags 中的 &amp;lsquo;-w -s&amp;rsquo; 选项.</description></item><item><title>设计思路</title><link>https://xtls.github.io/en/develop/intro/design/</link><pubDate>Wed, 23 Dec 2020 00:00:00 +0000</pubDate><guid>https://xtls.github.io/en/develop/intro/design/</guid><description>设计目标 Xray 内核提供了一个平台，支持必要的网络代理功能，在其之上可以进二次开发，以提供更好的用户体验； 以跨平台为首要原则，以减少二次开发的成本；
架构 内核分为三层：应用层、代理层和传输层。
每一层内包含数个模块，模块间互相独立，同类型的模块可无缝替换。
应用层 应用层包含一些代理层中常用的功能，这些功能被抽象出来，以便在不同的代理模块中复用。
应用层的模块应为纯软件实现，与硬件或平台相关的技术无关。
重要模块列表：
Dispatcher: 用于把入站代理所接收到的数据，传送给出站代理； Router: 路由模块，详见 路由配置； DNS: 内置的 DNS 服务器模块； Proxy Manager: 代理管理器；
代理层 代理层分为两部分：入站代理（Inbound Proxy）和出站代理（Outbound Proxy）。
两部分相互独立，入站代理不依赖于某个特定的出站代理，反之亦然。
入站代理 实现 proxy.Inbound 接口； 出站代理 实现 proxy.Outbound 接口；
传输层 传输层提供一些网络数据传输相关的工具模块。</description></item><item><title>开发规范</title><link>https://xtls.github.io/en/develop/intro/guide/</link><pubDate>Wed, 23 Dec 2020 00:00:00 +0000</pubDate><guid>https://xtls.github.io/en/develop/intro/guide/</guid><description>基本 版本控制 project X 的代码被托管在github上:
xray 核心 xray-core xray-flutter xray-flutter 安装脚本 Xray-install 数据文件 Xray-rules-dat 配置模板 Xray-examples xray文档 XTLS.github.io 您可以使用 Git 来获取代码.
分支（Branch） 本项目的主干分支为 main, main 分支也是发布时所使用的代码分支, 因此需要确保 master 在任一时刻都是可编译可使用的。
如果需要开发新的功能
请新开分支进行开发, 在开发完成并且经过充分测试后, 合并回主干分支. 新开分支如没有必要再存在时, 可以去除. 发布（Release） In progress
建立尝鲜版本和稳定版本两个发布通道 临时版本, 主要用于特定情况的测试(比如从分支build的), 于TG群内/issue回复等渠道 发布特定版本 尝鲜版本可以为daily build , 用于尝鲜和获得即时反馈和再改进. 稳定版本为定时更新(比如周更), 合并稳定的修改并发布. 引用其它项目 Golang 产品代码建议使用 Golang 标准库和 golang.</description></item></channel></rss>